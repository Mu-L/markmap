import './web.url.21efedcc.js';
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, L as stores$1, o as onMount, I as onDestroy, t as track, e as element, k as claim_element, l as children, h as detach_dev, r as attr_dev, p as add_location, u as insert_dev, y as listen_dev, X as prop_dev, b as binding_callbacks, a as bind, c as space, f as text, g as create_component, q as query_selector_all, j as claim_space, m as claim_text, n as claim_component, P as set_style, w as append_dev, x as mount_component, Y as prevent_default, z as add_flush_callback, A as transition_in, B as transition_out, C as destroy_component, Z as run_all, H as globals, T as set_data_dev, K as noop } from './client.feef39b9.js';
import { M as Markmap_1, a as lodash_debounce, b as browser } from './markmap.35941578.js';
import { F as Footer } from './footer.3c2a8b43.js';
import { T as Toolbar_1, p as parseURL, a as swal, s as subscribeHash, l as loadData } from './loader.07a301fc.js';

/* src/routes/repl.svelte generated by Svelte v3.29.4 */

const { document: document_1 } = globals;
const file = "src/routes/repl.svelte";

// (158:4) {:else}
function create_else_block(ctx) {
	let div;
	let form;
	let span;
	let t0;
	let t1;
	let t2;
	let input;
	let input_value_value;
	let t3;
	let a0;
	let t4;
	let t5;
	let a1;
	let t6;
	let t7;
	let a2;
	let t8;
	let t9;
	let mounted;
	let dispose;
	let if_block0 = /*payload*/ ctx[5].info.type && create_if_block_3(ctx);
	let if_block1 = /*payload*/ ctx[5].error && create_if_block_2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			form = element("form");
			span = element("span");
			t0 = text("Open URL:");
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			input = element("input");
			t3 = space();
			a0 = element("a");
			t4 = text("✓");
			t5 = space();
			a1 = element("a");
			t6 = text("✗");
			t7 = space();
			a2 = element("a");
			t8 = text("?");
			t9 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			form = claim_element(div_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			span = claim_element(form_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "Open URL:");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(form_nodes);
			if (if_block0) if_block0.l(form_nodes);
			t2 = claim_space(form_nodes);

			input = claim_element(form_nodes, "INPUT", {
				class: true,
				style: true,
				type: true,
				value: true
			});

			t3 = claim_space(form_nodes);
			a0 = claim_element(form_nodes, "A", { class: true });
			var a0_nodes = children(a0);
			t4 = claim_text(a0_nodes, "✓");
			a0_nodes.forEach(detach_dev);
			t5 = claim_space(form_nodes);
			a1 = claim_element(form_nodes, "A", { class: true });
			var a1_nodes = children(a1);
			t6 = claim_text(a1_nodes, "✗");
			a1_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);
			a2 = claim_element(form_nodes, "A", { class: true });
			var a2_nodes = children(a2);
			t8 = claim_text(a2_nodes, "?");
			a2_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			t9 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "hidden md:block mr-2");
			add_location(span, file, 160, 10, 4560);
			attr_dev(input, "class", "flex-1 border-b border-blue-500 pl-1 min-w-0");
			set_style(input, "width", "560px");
			attr_dev(input, "type", "url");
			input.value = input_value_value = /*payload*/ ctx[5].url;
			add_location(input, file, 164, 10, 4779);
			attr_dev(a0, "class", "ml-2 no-underline");
			add_location(a0, file, 165, 10, 4927);
			attr_dev(a1, "class", "ml-2 no-underline");
			add_location(a1, file, 166, 10, 5019);
			attr_dev(a2, "class", "ml-2 no-underline");
			add_location(a2, file, 167, 10, 5113);
			attr_dev(form, "class", "flex");
			add_location(form, file, 159, 8, 4489);
			attr_dev(div, "class", "md:flex w-full");
			add_location(div, file, 158, 6, 4452);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, form);
			append_dev(form, span);
			append_dev(span, t0);
			append_dev(form, t1);
			if (if_block0) if_block0.m(form, null);
			append_dev(form, t2);
			append_dev(form, input);
			append_dev(form, t3);
			append_dev(form, a0);
			append_dev(a0, t4);
			append_dev(form, t5);
			append_dev(form, a1);
			append_dev(a1, t6);
			append_dev(form, t7);
			append_dev(form, a2);
			append_dev(a2, t8);
			append_dev(div, t9);
			if (if_block1) if_block1.m(div, null);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*handleURLInput*/ ctx[14], false, false, false),
					listen_dev(a0, "click", prevent_default(/*handleURLOpen*/ ctx[12]), false, true, false),
					listen_dev(a1, "click", prevent_default(/*handleURLCancel*/ ctx[13]), false, true, false),
					listen_dev(a2, "click", prevent_default(/*handleURLHelp*/ ctx[15]), false, true, false),
					listen_dev(form, "submit", prevent_default(/*handleURLOpen*/ ctx[12]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*payload*/ ctx[5].info.type) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(form, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*payload*/ 32 && input_value_value !== (input_value_value = /*payload*/ ctx[5].url)) {
				prop_dev(input, "value", input_value_value);
			}

			if (/*payload*/ ctx[5].error) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(158:4) {:else}",
		ctx
	});

	return block;
}

// (156:4) {#if !payload.show}
function create_if_block_1(ctx) {
	let a;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Open URL");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {});
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Open URL");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(a, file, 156, 6, 4377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", prevent_default(/*handleURLStart*/ ctx[11]), false, true, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(156:4) {#if !payload.show}",
		ctx
	});

	return block;
}

// (162:10) {#if payload.info.type}
function create_if_block_3(ctx) {
	let span;
	let t_value = /*payload*/ ctx[5].info.type + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "hidden md:block px-1 bg-blue-500 text-white rounded-l");
			add_location(span, file, 162, 12, 4658);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*payload*/ 32 && t_value !== (t_value = /*payload*/ ctx[5].info.type + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(162:10) {#if payload.info.type}",
		ctx
	});

	return block;
}

// (170:8) {#if payload.error}
function create_if_block_2(ctx) {
	let div;
	let t_value = /*payload*/ ctx[5].error + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, t_value);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "ml-2 text-red-600");
			add_location(div, file, 170, 10, 5242);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*payload*/ 32 && t_value !== (t_value = /*payload*/ ctx[5].error + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(170:8) {#if payload.error}",
		ctx
	});

	return block;
}

// (178:6) {#if !cm}
function create_if_block(ctx) {
	let textarea;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			textarea = element("textarea");
			this.h();
		},
		l: function claim(nodes) {
			textarea = claim_element(nodes, "TEXTAREA", { class: true, value: true });
			children(textarea).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(textarea, "class", "w-full h-full p-1");
			textarea.value = /*content*/ ctx[4];
			add_location(textarea, file, 178, 6, 5484);
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);

			if (!mounted) {
				dispose = listen_dev(textarea, "input", /*handleInput*/ ctx[10], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*content*/ 16) {
				prop_dev(textarea, "value", /*content*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(178:6) {#if !cm}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div0;
	let a0;
	let t1;
	let t2;
	let main;
	let div1;
	let t3;
	let div8;
	let div2;
	let t4;
	let div7;
	let div3;
	let markmap;
	let updating_mm;
	let updating_el;
	let t5;
	let toolbar;
	let t6;
	let div6;
	let div4;
	let a1;
	let t7;
	let t8;
	let div5;
	let a2;
	let t9;
	let t10;
	let span;
	let t11;
	let t12;
	let footer;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (!/*payload*/ ctx[5].show) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = !/*cm*/ ctx[3] && create_if_block(ctx);

	function markmap_mm_binding(value) {
		/*markmap_mm_binding*/ ctx[17].call(null, value);
	}

	function markmap_el_binding(value) {
		/*markmap_el_binding*/ ctx[18].call(null, value);
	}

	let markmap_props = { content: /*content*/ ctx[4] };

	if (/*mm*/ ctx[2] !== void 0) {
		markmap_props.mm = /*mm*/ ctx[2];
	}

	if (/*svgEl*/ ctx[1] !== void 0) {
		markmap_props.el = /*svgEl*/ ctx[1];
	}

	markmap = new Markmap_1({ props: markmap_props, $$inline: true });
	binding_callbacks.push(() => bind(markmap, "mm", markmap_mm_binding));
	binding_callbacks.push(() => bind(markmap, "el", markmap_el_binding));

	toolbar = new Toolbar_1({
			props: {
				class: "absolute right-0 bottom-0 mr-2 mb-2",
				mm: /*mm*/ ctx[2],
				dirty: /*originalContent*/ ctx[6] !== /*content*/ ctx[4]
			},
			$$inline: true
		});

	footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			div0 = element("div");
			a0 = element("a");
			t1 = text("NEW: markmap in VSCode!");
			t2 = space();
			main = element("main");
			div1 = element("div");
			if_block0.c();
			t3 = space();
			div8 = element("div");
			div2 = element("div");
			if (if_block1) if_block1.c();
			t4 = space();
			div7 = element("div");
			div3 = element("div");
			create_component(markmap.$$.fragment);
			t5 = space();
			create_component(toolbar.$$.fragment);
			t6 = space();
			div6 = element("div");
			div4 = element("div");
			a1 = element("a");
			t7 = text("Download as interactive HTML");
			t8 = space();
			div5 = element("div");
			a2 = element("a");
			t9 = text("Download as SVG");
			t10 = space();
			span = element("span");
			t11 = text("⚠️");
			t12 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-r18bnt\"]", document_1.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);

			a0 = claim_element(div0_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "NEW: markmap in VSCode!");
			a0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			div1 = claim_element(main_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if_block0.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(main_nodes);
			div8 = claim_element(main_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div2 = claim_element(div8_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block1) if_block1.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t4 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div3 = claim_element(div7_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(markmap.$$.fragment, div3_nodes);
			t5 = claim_space(div3_nodes);
			claim_component(toolbar.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", {});
			var div6_nodes = children(div6);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			a1 = claim_element(div4_nodes, "A", {});
			var a1_nodes = children(a1);
			t7 = claim_text(a1_nodes, "Download as interactive HTML");
			a1_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t8 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true, title: true });
			var div5_nodes = children(div5);
			a2 = claim_element(div5_nodes, "A", {});
			var a2_nodes = children(a2);
			t9 = claim_text(a2_nodes, "Download as SVG");
			a2_nodes.forEach(detach_dev);
			t10 = claim_space(div5_nodes);
			span = claim_element(div5_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t11 = claim_text(span_nodes, "⚠️");
			span_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			claim_component(footer.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document_1.title = "Try Markmap";
			attr_dev(a0, "class", "inline-block text-sm text-orange-600 underline");
			attr_dev(a0, "href", "https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode");
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "rel", "noreferrer noopener");
			add_location(a0, file, 144, 2, 3985);
			attr_dev(div0, "class", "fixed z-10 hidden md:block");
			set_style(div0, "top", "15px");
			set_style(div0, "left", "50%");
			add_location(div0, file, 143, 0, 3916);
			attr_dev(div1, "class", "flex items-center mb-4 text-sm");
			add_location(div1, file, 154, 2, 4302);
			attr_dev(div2, "class", "flex-1 min-w-0 border border-gray-300");
			add_location(div2, file, 176, 4, 5389);
			attr_dev(div3, "class", "markmap-wrapper flex-1");
			add_location(div3, file, 182, 6, 5638);
			add_location(a1, file, 196, 10, 6006);
			attr_dev(div4, "class", "inline-block px-4 py-2");
			add_location(div4, file, 195, 8, 5959);
			add_location(a2, file, 199, 10, 6209);
			attr_dev(span, "class", "text-red-500");
			add_location(span, file, 200, 10, 6282);
			attr_dev(div5, "class", "inline-block px-4 py-2");
			attr_dev(div5, "title", "SVG does not work well with PrismJS and MathJax");
			add_location(div5, file, 198, 8, 6106);
			add_location(div6, file, 194, 6, 5945);
			attr_dev(div7, "class", "flex-1 min-w-0 flex flex-col");
			add_location(div7, file, 181, 4, 5589);
			attr_dev(div8, "class", "flex-1 md:flex min-h-0 repl");
			add_location(div8, file, 175, 2, 5343);
			attr_dev(main, "class", "inner flex flex-col md:fs");
			add_location(main, file, 153, 0, 4259);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div0, anchor);
			append_dev(div0, a0);
			append_dev(a0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, div1);
			if_block0.m(div1, null);
			append_dev(main, t3);
			append_dev(main, div8);
			append_dev(div8, div2);
			if (if_block1) if_block1.m(div2, null);
			/*div2_binding*/ ctx[16](div2);
			append_dev(div8, t4);
			append_dev(div8, div7);
			append_dev(div7, div3);
			mount_component(markmap, div3, null);
			append_dev(div3, t5);
			mount_component(toolbar, div3, null);
			append_dev(div7, t6);
			append_dev(div7, div6);
			append_dev(div6, div4);
			append_dev(div4, a1);
			append_dev(a1, t7);
			append_dev(div6, t8);
			append_dev(div6, div5);
			append_dev(div5, a2);
			append_dev(a2, t9);
			append_dev(div5, t10);
			append_dev(div5, span);
			append_dev(span, t11);
			insert_dev(target, t12, anchor);
			mount_component(footer, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*onClickNewFeature*/ ctx[9], false, false, false),
					listen_dev(a1, "click", prevent_default(/*onDownloadHTML*/ ctx[8]), false, true, false),
					listen_dev(a2, "click", prevent_default(/*onDownloadSVG*/ ctx[7]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div1, null);
				}
			}

			if (!/*cm*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const markmap_changes = {};
			if (dirty & /*content*/ 16) markmap_changes.content = /*content*/ ctx[4];

			if (!updating_mm && dirty & /*mm*/ 4) {
				updating_mm = true;
				markmap_changes.mm = /*mm*/ ctx[2];
				add_flush_callback(() => updating_mm = false);
			}

			if (!updating_el && dirty & /*svgEl*/ 2) {
				updating_el = true;
				markmap_changes.el = /*svgEl*/ ctx[1];
				add_flush_callback(() => updating_el = false);
			}

			markmap.$set(markmap_changes);
			const toolbar_changes = {};
			if (dirty & /*mm*/ 4) toolbar_changes.mm = /*mm*/ ctx[2];
			if (dirty & /*originalContent, content*/ 80) toolbar_changes.dirty = /*originalContent*/ ctx[6] !== /*content*/ ctx[4];
			toolbar.$set(toolbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markmap.$$.fragment, local);
			transition_in(toolbar.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markmap.$$.fragment, local);
			transition_out(toolbar.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(main);
			if_block0.d();
			if (if_block1) if_block1.d();
			/*div2_binding*/ ctx[16](null);
			destroy_component(markmap);
			destroy_component(toolbar);
			if (detaching) detach_dev(t12);
			destroy_component(footer, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function download(filename, url) {
	const a = document.createElement("a");
	a.download = filename;
	a.href = url;
	a.click();
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Repl", slots, []);
	let editorEl;
	let svgEl;
	let mm;
	let cm;
	let content = "";

	const payload = {
		url: "https://gist.github.com/gera2ld/af76a4c245b302206b16aec503dbe07b"
	};

	payload.info = parseURL(payload.url);
	const { page } = stores$1();

	function onDownloadSVG() {
		const svgHtml = svgEl.outerHTML.replace(/<br>/g, "<br/>");
		download("markmap.svg", "data:image/svg;utf8," + encodeURIComponent(svgHtml));
	}

	function onDownloadHTML() {
		const { root, features } = browser.transform(content);
		const assets = browser.getUsedAssets(features);
		const html = browser.fillTemplate(root, assets);
		download("markmap.html", "data:text/html;utf8," + encodeURIComponent(html));
	}

	function update() {
		if (cm) {
			$$invalidate(4, content = cm.getValue());
		}
	}

	function onClickNewFeature() {
		track("event", "click", { event_label: "markmapVSCodeFromREPL" });
	}

	function handleInput(e) {
		$$invalidate(4, content = e.target.value);
	}

	function handleURLStart() {
		$$invalidate(5, payload.show = true, payload);
	}

	async function handleURLOpen() {
		try {
			const { type, d } = payload.info;
			if (!type) throw new Error("Unsupported URL");
			await loadData(d);
			$$invalidate(5, payload.show = false, payload);
			$$invalidate(5, payload.error = null, payload);
			window.location.hash = `#?d=${d}`;
			track("event", "openUrl", { event_label: type });
		} catch(err) {
			$$invalidate(5, payload.error = err.message || "Unknown error", payload);
			track("event", "openUrl", { event_label: "error" });
		}
	}

	function handleURLCancel() {
		$$invalidate(5, payload.show = false, payload);
	}

	function handleURLInput(e) {
		$$invalidate(5, payload.url = e.target.value, payload);
		$$invalidate(5, payload.info = parseURL(payload.url) || {}, payload);
	}

	function handleURLHelp() {
		track("event", "openUrl", { event_label: "help" });
		const el = document.createElement("div");

		el.innerHTML = `
<ol class="text-left list-decimal px-4 break-words">
<li class="mb-1">GitHub Gist URL
<div class="text-xs">e.g. https://gist.github.com/gera2ld/af76a4c245b302206b16aec503dbe07b</div></li>
<li class="mb-1">Gitee Gist URL
<div class="text-xs">e.g. https://gitee.com/gerald/codes/a73wgucr28dhlxp91kytm57</div></li>
<li class="mb-1"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener noreferrer">CORS</a>-enabled URL to a markdown file, including raw file URL in GitHub or Gist
<div class="text-xs">e.g. https://raw.githubusercontent.com/gera2ld/markmap/master/README.md</div></li>
</ol>
`;

		swal({
			text: "The following types of URLs are supported:",
			content: el
		});
	}

	let revoke;
	let originalContent;

	onMount(async () => {
		revoke = subscribeHash(text => {
			if (cm) cm.setValue(text);
			$$invalidate(4, content = text);
			$$invalidate(6, originalContent = content);
		});

		const { default: CodeMirror } = await Promise.all([import('./codemirror.3f410a4a.js'), __inject_styles(["client-ff2bd8be.css","codemirror-8033c53c.css"])]).then(function(x) { return x[0]; });

		$$invalidate(3, cm = CodeMirror(editorEl, {
			lineNumbers: true,
			mode: "markdown",
			value: content,
			indentUnit: 2,
			tabSize: 2
		}));

		cm.setOption("extraKeys", {
			Tab: cm => {
				if (cm.somethingSelected()) {
					cm.execCommand("indentMore");
				} else {
					cm.replaceSelection((" ").repeat(cm.getOption("indentUnit")));
				}
			},
			"Shift-Tab": cm => {
				cm.execCommand("indentLess");
			}
		});

		cm.on("change", lodash_debounce(update, 500));
	});

	onDestroy(() => {
		$$invalidate(3, cm = null);

		if (revoke) {
			revoke();
			revoke = null;
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Repl> was created with unknown prop '${key}'`);
	});

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			editorEl = $$value;
			$$invalidate(0, editorEl);
		});
	}

	function markmap_mm_binding(value) {
		mm = value;
		$$invalidate(2, mm);
	}

	function markmap_el_binding(value) {
		svgEl = value;
		$$invalidate(1, svgEl);
	}

	$$self.$capture_state = () => ({
		onMount,
		onDestroy,
		stores: stores$1,
		debounce: lodash_debounce,
		transform: browser.transform,
		getUsedAssets: browser.getUsedAssets,
		fillTemplate: browser.fillTemplate,
		swal,
		track,
		Markmap: Markmap_1,
		Toolbar: Toolbar_1,
		Footer,
		subscribeHash,
		parseURL,
		loadData,
		editorEl,
		svgEl,
		mm,
		cm,
		content,
		payload,
		page,
		download,
		onDownloadSVG,
		onDownloadHTML,
		update,
		onClickNewFeature,
		handleInput,
		handleURLStart,
		handleURLOpen,
		handleURLCancel,
		handleURLInput,
		handleURLHelp,
		revoke,
		originalContent
	});

	$$self.$inject_state = $$props => {
		if ("editorEl" in $$props) $$invalidate(0, editorEl = $$props.editorEl);
		if ("svgEl" in $$props) $$invalidate(1, svgEl = $$props.svgEl);
		if ("mm" in $$props) $$invalidate(2, mm = $$props.mm);
		if ("cm" in $$props) $$invalidate(3, cm = $$props.cm);
		if ("content" in $$props) $$invalidate(4, content = $$props.content);
		if ("revoke" in $$props) revoke = $$props.revoke;
		if ("originalContent" in $$props) $$invalidate(6, originalContent = $$props.originalContent);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		editorEl,
		svgEl,
		mm,
		cm,
		content,
		payload,
		originalContent,
		onDownloadSVG,
		onDownloadHTML,
		onClickNewFeature,
		handleInput,
		handleURLStart,
		handleURLOpen,
		handleURLCancel,
		handleURLInput,
		handleURLHelp,
		div2_binding,
		markmap_mm_binding,
		markmap_el_binding
	];
}

class Repl extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Repl",
			options,
			id: create_fragment.name
		});
	}
}

export default Repl;

import __inject_styles from './inject_styles.a62d1340.js';